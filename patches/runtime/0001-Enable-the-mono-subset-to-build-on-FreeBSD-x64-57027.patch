From f374534f20eaa36665f5c9a7293ddc7e9e015523 Mon Sep 17 00:00:00 2001
From: Jason Pugsley <jason.pugsley@gmail.com>
Date: Sat, 28 Aug 2021 06:43:34 +1000
Subject: [PATCH] Enable the mono subset to build on FreeBSD x64 (#57027)

* Fixes for building for FreeBSD x64

Cross-build on Linux for FreeBSD x64 now uses LLVM provided lld
linker to create valid FreeBSD binaries.

find-native-compiler.sh will now look for clang versions 10, 11
and 12. init-compiler.sh will also look for version 12.

The cmake test for HAVE_ALLOC_H in eglib-config.h.cmake.in
would fail if it wasn't defined. The fix was to convert to
an normal C preprocessor #ifdef

Update the docker container to use the most recent version of
ubuntu-18.04-cross-freebsd-12

* Enable cross-build FreeBSD on Linux to find inotify library

Adjusted CMake settings to search the crossrootfs path
for libinotify.so
---
 eng/common/cross/toolchain.cmake                     |  5 ++++-
 eng/common/native/find-native-compiler.sh            |  2 +-
 eng/native/init-compiler.sh                          |  2 +-
 eng/pipelines/common/platform-matrix.yml             |  2 +-
 .../Native/Unix/System.Native/extra_libs.cmake       |  2 +-
 src/libraries/Native/Unix/configure.cmake            |  2 +-
 src/mono/CMakeLists.txt                              | 12 +++++++++++-
 src/mono/cmake/configure.cmake                       |  6 ++++++
 src/mono/cmake/eglib-config.h.cmake.in               |  2 +-
 src/mono/mono.proj                                   |  6 ++++++
 src/mono/mono/mini/CMakeLists.txt                    |  4 +++-
 11 files changed, 36 insertions(+), 9 deletions(-)

diff --git a/eng/common/cross/toolchain.cmake b/eng/common/cross/toolchain.cmake
index fc11001aa76..d8f61472abb 100644
--- a/eng/common/cross/toolchain.cmake
+++ b/eng/common/cross/toolchain.cmake
@@ -44,7 +44,7 @@ elseif(TARGET_ARCH_NAME STREQUAL "x86")
   set(TOOLCHAIN "i686-linux-gnu")
 elseif (CMAKE_SYSTEM_NAME STREQUAL "FreeBSD")
   set(CMAKE_SYSTEM_PROCESSOR "x86_64")
-  set(triple "x86_64-unknown-freebsd11")
+  set(triple "x86_64-unknown-freebsd12")
 elseif (ILLUMOS)
   set(CMAKE_SYSTEM_PROCESSOR "x86_64")
   set(TOOLCHAIN "x86_64-illumos")
@@ -90,6 +90,9 @@ elseif(CMAKE_SYSTEM_NAME STREQUAL "FreeBSD")
     set(CMAKE_C_COMPILER_TARGET ${triple})
     set(CMAKE_CXX_COMPILER_TARGET ${triple})
     set(CMAKE_ASM_COMPILER_TARGET ${triple})
+    set(CMAKE_EXE_LINKER_FLAGS "${CMAKE_EXE_LINKER_FLAGS} -fuse-ld=lld")
+    set(CMAKE_SHARED_LINKER_FLAGS "${CMAKE_SHARED_LINKER_FLAGS} -fuse-ld=lld")
+    set(CMAKE_MODULE_LINKER_FLAGS "${CMAKE_MODULE_LINKER_FLAGS} -fuse-ld=lld")
     set(CMAKE_SYSROOT "${CROSS_ROOTFS}")
 elseif(ILLUMOS)
     set(CMAKE_SYSROOT "${CROSS_ROOTFS}")
diff --git a/eng/common/native/find-native-compiler.sh b/eng/common/native/find-native-compiler.sh
index aed19d07d50..861d1931e55 100644
--- a/eng/common/native/find-native-compiler.sh
+++ b/eng/common/native/find-native-compiler.sh
@@ -55,7 +55,7 @@ if [ -z "$CLR_CC" ]; then
     # Set default versions
     if [ -z "$majorVersion" ]; then
         # note: gcc (all versions) and clang versions higher than 6 do not have minor version in file name, if it is zero.
-        if [ "$compiler" = "clang" ]; then versions=( 9 8 7 6.0 5.0 4.0 3.9 3.8 3.7 3.6 3.5 )
+        if [ "$compiler" = "clang" ]; then versions=( 12 11 10 9 8 7 6.0 5.0 4.0 3.9 3.8 3.7 3.6 3.5 )
         elif [ "$compiler" = "gcc" ]; then versions=( 9 8 7 6 5 4.9 ); fi
 
         for version in "${versions[@]}"; do
diff --git a/eng/native/init-compiler.sh b/eng/native/init-compiler.sh
index ca408e4d088..a877f8715e7 100755
--- a/eng/native/init-compiler.sh
+++ b/eng/native/init-compiler.sh
@@ -45,7 +45,7 @@ if [[ -z "$CLR_CC" ]]; then
     # Set default versions
     if [[ -z "$majorVersion" ]]; then
         # note: gcc (all versions) and clang versions higher than 6 do not have minor version in file name, if it is zero.
-        if [[ "$compiler" == "clang" ]]; then versions=( 11 10 9 8 7 6.0 5.0 4.0 3.9 3.8 3.7 3.6 3.5 )
+        if [[ "$compiler" == "clang" ]]; then versions=( 12 11 10 9 8 7 6.0 5.0 4.0 3.9 3.8 3.7 3.6 3.5 )
         elif [[ "$compiler" == "gcc" ]]; then versions=( 11 10 9 8 7 6 5 4.9 ); fi
 
         for version in "${versions[@]}"; do
diff --git a/eng/pipelines/common/platform-matrix.yml b/eng/pipelines/common/platform-matrix.yml
index defd34be84a..0d5b5099efd 100644
--- a/eng/pipelines/common/platform-matrix.yml
+++ b/eng/pipelines/common/platform-matrix.yml
@@ -262,7 +262,7 @@ jobs:
       targetRid: freebsd-x64
       platform: FreeBSD_x64
       container:
-        image: ubuntu-18.04-cross-freebsd-11-20200407092345-a84b0d2
+        image: ubuntu-18.04-cross-freebsd-12-20210813173449-f13d79e
         registry: mcr
       jobParameters:
         runtimeFlavor: ${{ parameters.runtimeFlavor }}
diff --git a/src/libraries/Native/Unix/System.Native/extra_libs.cmake b/src/libraries/Native/Unix/System.Native/extra_libs.cmake
index 74efbf803ae..2edc74bde7a 100644
--- a/src/libraries/Native/Unix/System.Native/extra_libs.cmake
+++ b/src/libraries/Native/Unix/System.Native/extra_libs.cmake
@@ -4,7 +4,7 @@ macro(append_extra_system_libs NativeLibsExtra)
         list(APPEND ${NativeLibsExtra} rt)
     elseif (CLR_CMAKE_TARGET_FREEBSD)
         list(APPEND ${NativeLibsExtra} pthread)
-        find_library(INOTIFY_LIBRARY inotify HINTS /usr/local/lib)
+        find_library(INOTIFY_LIBRARY inotify HINTS ${CROSS_ROOTFS}/usr/local/lib)
         list(APPEND ${NativeLibsExtra} ${INOTIFY_LIBRARY})
     elseif (CLR_CMAKE_TARGET_SUNOS)
         list(APPEND ${NativeLibsExtra} socket)
diff --git a/src/libraries/Native/Unix/configure.cmake b/src/libraries/Native/Unix/configure.cmake
index 18afacc2dbc..e35f5ddbb3d 100644
--- a/src/libraries/Native/Unix/configure.cmake
+++ b/src/libraries/Native/Unix/configure.cmake
@@ -982,7 +982,7 @@ set (CMAKE_REQUIRED_FLAGS ${PREVIOUS_CMAKE_REQUIRED_FLAGS})
 
 set (PREVIOUS_CMAKE_REQUIRED_LIBRARIES ${CMAKE_REQUIRED_LIBRARIES})
 if (HAVE_SYS_INOTIFY_H AND CLR_CMAKE_TARGET_FREEBSD)
-    set (CMAKE_REQUIRED_LIBRARIES "-linotify -L/usr/local/lib")
+    set (CMAKE_REQUIRED_LIBRARIES "-linotify -L${CROSS_ROOTFS}/usr/local/lib")
 endif()
 
 check_symbol_exists(
diff --git a/src/mono/CMakeLists.txt b/src/mono/CMakeLists.txt
index 4c25d97b7a5..cb82d3e7dec 100644
--- a/src/mono/CMakeLists.txt
+++ b/src/mono/CMakeLists.txt
@@ -252,6 +252,8 @@ elseif(CMAKE_SYSTEM_NAME STREQUAL "Windows")
     add_compile_options(/GL) # whole program optimization
     add_link_options(/LTCG)  # link-time code generation
   endif()
+elseif(CMAKE_SYSTEM_NAME STREQUAL "FreeBSD")
+  set(HOST_FREEBSD 1)
 else()
   message(FATAL_ERROR "Host '${CMAKE_SYSTEM_NAME}' not supported.")
 endif()
@@ -290,6 +292,8 @@ elseif(TARGET_SYSTEM_NAME STREQUAL "Emscripten")
   endif()
 elseif(TARGET_SYSTEM_NAME STREQUAL "Windows")
   set(TARGET_WIN32 1)
+elseif(TARGET_SYSTEM_NAME STREQUAL "FreeBSD")
+  set(TARGET_FREEBSD 1)
 else()
   message(FATAL_ERROR "Target '${TARGET_SYSTEM_NAME}' not supported.")
 endif()
@@ -318,7 +322,7 @@ elseif(CMAKE_SYSTEM_PROCESSOR STREQUAL "i686" OR CMAKE_SYSTEM_PROCESSOR STREQUAL
   set(CMAKE_SYSTEM_PROCESSOR "x86")
 elseif(CMAKE_SYSTEM_PROCESSOR STREQUAL "aarch64" OR CMAKE_SYSTEM_PROCESSOR STREQUAL "ARM64")
   set(CMAKE_SYSTEM_PROCESSOR "arm64")
-elseif(CMAKE_SYSTEM_PROCESSOR STREQUAL "AMD64" OR CMAKE_SYSTEM_PROCESSOR STREQUAL "x64")
+elseif(CMAKE_SYSTEM_PROCESSOR STREQUAL "AMD64" OR CMAKE_SYSTEM_PROCESSOR STREQUAL "amd64" OR CMAKE_SYSTEM_PROCESSOR STREQUAL "x64")
   set(CMAKE_SYSTEM_PROCESSOR "x86_64")
 endif()
 
@@ -589,6 +593,12 @@ elseif(HOST_LINUX)
 elseif(HOST_WIN32)
   set(ICU_FLAGS "-DTARGET_WINDOWS -DPALEXPORT=EXTERN_C")
   set(HAVE_SYS_ICU 1)
+elseif(TARGET_FREEBSD)
+  set(ICU_FLAGS "-DTARGET_UNIX -Wno-deprecated-declarations")
+  set(HAVE_SYS_ICU 1)
+  set(ICU_LIBS icuuc icui18n)
+  set(ICU_INCLUDEDIR "${CROSS_ROOTFS}/usr/local/include")
+  set(ICU_LIBDIR "${CROSS_ROOTFS}/usr/local/lib")
 else()
   message(FATAL_ERROR "Unknown host")
 endif()
diff --git a/src/mono/cmake/configure.cmake b/src/mono/cmake/configure.cmake
index 34fa15f556c..6e358620ed9 100644
--- a/src/mono/cmake/configure.cmake
+++ b/src/mono/cmake/configure.cmake
@@ -164,3 +164,9 @@ endif()
 if(HOST_BROWSER)
   set(HAVE_FORK 0)
 endif()
+
+if(CMAKE_SYSTEM_NAME STREQUAL "FreeBSD")
+  # FreeBSD fails earlier ac_check_headers for these because <sys/types.h> is needed.
+  set(HAVE_SYS_SYSCTL_H 1)
+  set(HAVE_SYS_USER_H 1)
+endif()
diff --git a/src/mono/cmake/eglib-config.h.cmake.in b/src/mono/cmake/eglib-config.h.cmake.in
index 9f1394e134b..ac061852d61 100644
--- a/src/mono/cmake/eglib-config.h.cmake.in
+++ b/src/mono/cmake/eglib-config.h.cmake.in
@@ -33,7 +33,7 @@
 
 #else
 
-#if @HAVE_ALLOCA_H@ == 1
+#ifdef HAVE_ALLOCA_H
 #define G_HAVE_ALLOCA_H
 #endif
 
diff --git a/src/mono/mono.proj b/src/mono/mono.proj
index a329c0ac299..da81f1b0d44 100644
--- a/src/mono/mono.proj
+++ b/src/mono/mono.proj
@@ -236,6 +236,12 @@
       <_MonoBuildEnv Include="PKG_CONFIG_PATH=$(MonoCrossDir)/usr/lib/s390x-linux-gnu/pkgconfig" />
     </ItemGroup>
 
+    <!-- x64 FreeBSD cross build options -->
+    <ItemGroup Condition="'$(TargetsFreeBSD)' == 'true' and '$(MonoCrossDir)' != ''">
+      <_MonoCMakeArgs Include="-DCMAKE_TOOLCHAIN_FILE=$([MSBuild]::NormalizePath('$(RepositoryEngineeringDir)', 'common', 'cross', 'toolchain.cmake'))" />
+      <_MonoBuildEnv Include="TARGET_BUILD_ARCH=x64" />
+    </ItemGroup>
+
     <!-- Windows specific options -->
     <ItemGroup Condition="'$(TargetsWindows)' == 'true'">
       <_MonoCPPFLAGS Include="-DWIN32" />
diff --git a/src/mono/mono/mini/CMakeLists.txt b/src/mono/mono/mini/CMakeLists.txt
index 841bff5f566..9007140f007 100644
--- a/src/mono/mono/mini/CMakeLists.txt
+++ b/src/mono/mono/mini/CMakeLists.txt
@@ -33,6 +33,8 @@ elseif(HOST_LINUX)
 set(OS_LIBS pthread m dl)
 elseif(HOST_WIN32)
 set(OS_LIBS bcrypt.lib Mswsock.lib ws2_32.lib psapi.lib version.lib advapi32.lib winmm.lib kernel32.lib)
+elseif(HOST_FREEBSD)
+  set(OS_LIBS pthread m)
 endif()
 
 #
@@ -253,7 +255,7 @@ set(posix_sources
 
 if(HOST_DARWIN)
 set(os_sources "${darwin_sources};${posix_sources}")
-elseif(HOST_LINUX)
+elseif(HOST_LINUX OR HOST_FREEBSD)
 set(os_sources "${posix_sources}")
 elseif(HOST_WIN32)
 set(os_sources "${windows_sources}")
-- 
2.25.1

