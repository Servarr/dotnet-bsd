parameters:
- name: runtimeBranch
  displayName: Tag for runtime repository
  type: string
  default: v8.0.0
- name: aspBranch
  displayName: Tag for aspnetcore repository
  type: string
  default: v8.0.0
- name: sdkBranch
  displayName: Tag for sdk repository
  type: string
  default: v8.0.100
- name: aspireBranch
  displayName: Tag for aspire repository
  type: string
  default: v8.0.0-preview.1.23557.2
- name: installerBranch
  displayName: Tag for installer repository
  type: string
  default: v8.0.100

variables:
  runCounter: $[counter('runNumber', 1)]

resources:
  repositories:
  - repository: runtime
    type: github
    endpoint: Servarr
    name: dotnet/runtime
    ref: release/8.0
  - repository: aspnetcore
    type: github
    endpoint: Servarr
    name: dotnet/aspnetcore
    ref: release/8.0
  - repository: sdk
    type: github
    endpoint: Servarr
    name: dotnet/sdk
    ref: release/8.0.1xx
  - repository: aspire
    type: github
    endpoint: Servarr
    name: dotnet/aspire
    ref: release/8.0-preview1
  - repository: installer
    type: github
    endpoint: Servarr
    name: dotnet/installer
    ref: release/8.0.1xx

trigger:
  branches:
    include:
    - v8

pr:
- v8

stages:
  - stage: Runtime
    dependsOn: []

    pool:
      vmImage: 'ubuntu-22.04'

    jobs:
      - job: Setup
        steps:
        - bash: |
            BRANCH=${{ parameters.runtimeBranch }}
            echo "##vso[build.updatebuildnumber]${BRANCH/\//-}-${RUNCOUNTER}"
          displayName: Set Build Name

      - job: Runtime
        timeoutInMinutes: 0
        steps:
          - checkout: self
          - checkout: runtime
          - bash: |
              set -e
              git -C runtime checkout ${{ parameters.runtimeBranch }}
              sed -i '/\/dnceng\/internal\//d' runtime/NuGet.config
            displayName: Checkout and patch
          - bash: |
              source dotnet-bsd/common.sh
              get_runtime_docker
              echo $DOTNET_DOCKER_TAG
              calculate_build_id $(git -C runtime tag --points-at HEAD)
              echo $OFFICIALBUILDID
              docker run -e ROOTFS_DIR=/crossrootfs/x64 -v ${BUILD_SOURCESDIRECTORY}/runtime:/runtime $DOTNET_DOCKER_TAG /runtime/eng/build.sh -ci -c Release -cross -os FreeBSD /p:IsEligibleForNgenOptimization=false /p:OfficialBuildId=$OFFICIALBUILDID -subset Clr.Native+Host.Native
              docker run -e ROOTFS_DIR=/crossrootfs/x64 -v ${BUILD_SOURCESDIRECTORY}/runtime:/runtime $DOTNET_DOCKER_TAG /runtime/eng/build.sh -ci -c Release -cross -os FreeBSD /p:IsEligibleForNgenOptimization=false /p:OfficialBuildId=$OFFICIALBUILDID /p:AppHostSourcePath=/runtime/artifacts/obj/freebsd-x64.Release/apphost/standalone/apphost
            displayName: Build Runtime
          - publish: '$(Build.SourcesDirectory)/runtime/artifacts/packages/Release/Shipping'
            artifact: RuntimePackages
            displayName: Publish Runtime
          - publish: '$(Build.SourcesDirectory)/runtime/artifacts/log'
            condition: succeededOrFailed()
            artifact: RuntimeLogs
            displayName: Publish Build Logs

  - stage: Sdk
    dependsOn: []

    pool:
      vmImage: 'ubuntu-22.04'

    jobs:
      - job: Aspire
        timeoutInMinutes: 0
        steps:
          - checkout: self
          - checkout: aspire
          - bash: |
              set -e
              git -C aspire checkout ${{ parameters.aspireBranch }}
              sed -i '/\/dnceng\/internal\//d' NuGet.config
            displayName: Checkout and patch
          - bash: |
              aspire/build.sh --restore --build --pack --ci /p:OfficialBuildId=20231101.7
            displayName: Build Aspire
          - publish: '$(Build.SourcesDirectory)/aspire/artifacts/packages/Release/Shipping/'
            artifact: AspirePackages
            displayName: Publish Aspire
          - publish: '$(Build.SourcesDirectory)/sdk/artifacts/log'
            condition: succeededOrFailed()
            artifact: AspireLogs
            displayName: Publish Build Logs

      - job: Sdk
        timeoutInMinutes: 0
        steps:
          - checkout: self
          - checkout: sdk
          - bash: |
              set -e
              git -C sdk checkout ${{ parameters.sdkBranch }}
            displayName: Checkout and patch
          - bash: |
              source dotnet-bsd/common.sh
              calculate_build_id $(git -C sdk tag --points-at HEAD)
              echo $OFFICIALBUILDID
              sdk/build.sh -c Release -pack -ci /p:OfficialBuildId=$OFFICIALBUILDID
            displayName: Build SDK
          - publish: '$(Build.SourcesDirectory)/sdk/artifacts/packages/Release/NonShipping/'
            artifact: SdkPackages
            displayName: Publish SDK
          - publish: '$(Build.SourcesDirectory)/sdk/artifacts/log'
            condition: succeededOrFailed()
            artifact: SdkLogs
            displayName: Publish Build Logs

  - stage: AspNetCore
    dependsOn: Runtime
    pool:
      vmImage: 'ubuntu-22.04'
    jobs:
      - job: AspNetCore
        timeoutInMinutes: 0
        steps:
          - checkout: self
          - checkout: aspnetcore
            submodules: true
          - bash: |
              set -e
              git -C aspnetcore checkout ${{ parameters.aspBranch }}
              git -C aspnetcore submodule update --init
              sed -i 's/linux-x64;/&freebsd-x64;/' aspnetcore/Directory.Build.props
              sed -i '/<LatestPackageReference Include="Microsoft.NETCore.App.Runtime.linux-x64" \/>/a \ \ \ \ <LatestPackageReference Include="Microsoft.NETCore.App.Runtime.freebsd-x64" \/>' aspnetcore/eng/Dependencies.props
              sed -i 's/<Reference Include="Microsoft.NETCore.App.Crossgen2/<Reference Condition="'\''$(CrossgenOutput)'\'' == '\''true'\''" Include="Microsoft.NETCore.App.Crossgen2/' aspnetcore/src/Framework/App.Runtime/src/Microsoft.AspNetCore.App.Runtime.csproj
              dotnet nuget add source ../runtime/artifacts/packages/Release/Shipping --name local --configfile aspnetcore/NuGet.config
              sed -i '/\/dnceng\/internal\//d' aspnetcore/NuGet.config
            displayName: Checkout and patch
          - task: DownloadPipelineArtifact@2
            inputs:
              buildType: 'current'
              artifactName: RuntimePackages
              targetPath: '$(Build.SourcesDirectory)/runtime/artifacts/packages/Release/Shipping'
              patterns: |
                dotnet-runtime-*-freebsd-x64.tar.gz
                Microsoft.*.freebsd-x64.*.nupkg
          - bash: |
              source dotnet-bsd/common.sh
              calculate_build_id $(git -C aspnetcore tag --points-at HEAD)
              echo $OFFICIALBUILDID
              ls -lR runtime
              mkdir -p aspnetcore/artifacts/obj/Microsoft.AspNetCore.App.Runtime
              cp runtime/artifacts/packages/Release/Shipping/dotnet-runtime-*-freebsd-x64.tar.gz aspnetcore/artifacts/obj/Microsoft.AspNetCore.App.Runtime
              aspnetcore/eng/build.sh -c Release -ci --os-name freebsd -pack /p:CrossgenOutput=false /p:OfficialBuildId=$OFFICIALBUILDID
            displayName: Build AspNetCore
          - publish: '$(Build.SourcesDirectory)/aspnetcore/artifacts/packages/Release/Shipping'
            artifact: AspNetCorePackages
            displayName: Publish AspNetCore Packages
          - publish: '$(Build.SourcesDirectory)/aspnetcore/artifacts/installers/Release'
            artifact: AspNetCoreInstallers
            displayName: Publish AspNetCore Installers
          - publish: '$(Build.SourcesDirectory)/aspnetcore/artifacts/log'
            condition: succeededOrFailed()
            artifact: AspNetCoreLogs
            displayName: Publish Build Logs

  - stage: Installer
    dependsOn:
      - AspNetCore
      - Sdk
    pool:
      vmImage: 'ubuntu-22.04'
    jobs:
      - job: Installer
        timeoutInMinutes: 0
        steps:
          - checkout: self
          - checkout: installer
          - bash: |
              set -e
              git -C installer tag | grep ${{ parameters.installerBranch }} | xargs git -C installer checkout
              git -C installer apply -C0 ../dotnet-bsd/patches/installer/0001-freebsd-support.patch
              sed -i 's/@(NetCore31RuntimePackRids);/@(NetCore31RuntimePackRids);freebsd-x64;/' installer/src/redist/targets/GenerateBundledVersions.targets
              sed -i 's/@(AspNetCore31RuntimePackRids);/@(AspNetCore31RuntimePackRids);freebsd-x64;/' installer/src/redist/targets/GenerateBundledVersions.targets
              dotnet nuget remove source msbuild --configfile installer/NuGet.config || true
              dotnet nuget remove source nuget-build --configfile installer/NuGet.config || true
              dotnet nuget add source ../runtime/artifacts/packages/Release/Shipping --name runtime --configfile installer/NuGet.config
              dotnet nuget add source ../aspnetcore/artifacts/packages/Release/Shipping --name aspnetcore --configfile installer/NuGet.config
              dotnet nuget add source ../aspire/artifacts/packages/Release/Shipping --name aspire --configfile installer/NuGet.config
              sed -i '/\/dnceng\/internal\//d' installer/NuGet.config
            displayName: Checkout and patch
          - task: DownloadPipelineArtifact@2
            inputs:
              buildType: 'current'
              artifactName: RuntimePackages
              targetPath: '$(Build.SourcesDirectory)/runtime/artifacts/packages/Release/Shipping'
              patterns: |
                dotnet-runtime-*-freebsd-x64.tar.gz
                Microsoft.*.freebsd-x64.*.nupkg
          - task: DownloadPipelineArtifact@2
            inputs:
              buildType: 'current'
              artifactName: AspNetCorePackages
              targetPath: '$(Build.SourcesDirectory)/aspnetcore/artifacts/packages/Release/Shipping'
              patterns: |
                Microsoft.*.freebsd-x64.*.nupkg
          - task: DownloadPipelineArtifact@2
            inputs:
              buildType: 'current'
              artifactName: AspirePackages
              targetPath: '$(Build.SourcesDirectory)/aspire/artifacts/packages/Release/Shipping'
              patterns: |
                Microsoft.*.nupkg
          - task: DownloadPipelineArtifact@2
            inputs:
              buildType: 'current'
              artifactName: AspNetCoreInstallers
              targetPath: '$(Build.SourcesDirectory)/aspnetcore/artifacts/installers/Release'
              patterns: 'aspnetcore-runtime-*'
          - task: DownloadPipelineArtifact@2
            inputs:
              buildType: 'current'
              artifactName: SdkPackages
              targetPath: '$(Build.SourcesDirectory)/sdk/artifacts/packages/Release/NonShipping/'
              patterns: |
                dotnet-toolset-internal-*.zip
          - bash: |
              source dotnet-bsd/common.sh
              calculate_build_id $(git -C installer tag --points-at HEAD)
              echo $OFFICIALBUILDID
              ls -lR runtime
              ls -lR aspnetcore
              mkdir -p installer/artifacts/obj/redist/Release/downloads/
              cp runtime/artifacts/packages/Release/Shipping/dotnet-runtime-*-freebsd-x64.tar.gz installer/artifacts/obj/redist/Release/downloads/
              cp aspnetcore/artifacts/installers/Release/aspnetcore-runtime-* installer/artifacts/obj/redist/Release/downloads/
              cp sdk/artifacts/packages/Release/NonShipping/dotnet-toolset-internal-*.zip installer/artifacts/obj/redist/Release/downloads/
              installer/build.sh -c Release -ci  -pack --runtime-id freebsd-x64 /p:OSName=freebsd /p:CrossgenOutput=false /p:DISABLE_CROSSGEN=True /p:IncludeAspNetCoreRuntime=True /p:OfficialBuildId=$OFFICIALBUILDID
            displayName: Build Installer
          - publish: '$(Build.SourcesDirectory)/installer/artifacts/packages/Release/Shipping'
            artifact: Installer
            displayName: Publish Installer
          - publish: '$(Build.SourcesDirectory)/installer/artifacts/log'
            condition: succeededOrFailed()
            artifact: InstallerLogs
            displayName: Publish Build Logs
